diff --git a/src/clueGame/Board.java b/src/clueGame/Board.java
index 2ba545e..26f2e00 100644
--- a/src/clueGame/Board.java
+++ b/src/clueGame/Board.java
@@ -28,6 +28,7 @@ public class Board {
 	private List<List<BoardCell>> board;
 	private Map<Character, Room> roomMap;
 	private Set<BoardCell> targets;
+	private ArrayList<BoardCell> doorways;
 
 	// constructor is private to ensure only one can be created
 	private Board() {
@@ -69,6 +70,7 @@ public class Board {
 			System.out.println("Bad Config: Invalid Character in Layout");
 			e.printStackTrace();
 		}
+		this.initializeAdjacencies();
 	}
 
 	/*
@@ -126,9 +128,9 @@ public class Board {
 		File lay = new File("data/" + this.layout);
 		Scanner reader = new Scanner(lay);
 
-		ArrayList<BoardCell> doorways = new ArrayList<BoardCell>();
+		this.doorways = new ArrayList<BoardCell>();
 
-		int rows = 0;
+		int rowIndex = 0;
 		int cols = 0;
 
 		// Iterate through each row of the csv and thus each row of the board
@@ -140,34 +142,35 @@ public class Board {
 
 			cols = splitData.length;
 
-			// Set the number of columns of the forst pass through
-			if (numCols == -1) {
-				numCols = cols;
+			// If the number of Columns hasn't been set
+			if (this.numCols == -1) {
+				this.numCols = cols;
+			} else if (cols != this.numCols) {
+				// if the number of columns varies, then we have a bad configuration
+				throw new BadConfigFormatException();
 			}
 
 			// create the array for the row
-			ArrayList<BoardCell> r = new ArrayList<BoardCell>(cols);
+			ArrayList<BoardCell> row = new ArrayList<BoardCell>(cols);
 
 			// iterate through the split data
-			int col = 0;
+			int colIndex = 0;
 			for (String cell : splitData) {
-				BoardCell b = new BoardCell(rows, col);
-				col++;
+				BoardCell b = new BoardCell(rowIndex, colIndex);
+				colIndex++;
 
 				// if the room label is not valid throw an Exception
 				if (!roomMap.containsKey(cell.charAt(0))) {
 					throw new BadConfigFormatException();
 				}
-
 				// If the cell is a normal cell, just a label
 				if (cell.length() == 1) {
-
 					b.setCellLabel(cell.charAt(0));
 
-					// if the cell has some spectial operation
+					// if the cell has some special operation
 				} else if (cell.length() == 2) {
-
-					// System.out.println(cell);
+					// TODO: reformat these logical statements to clean up the code, potentially
+					// adding a helper function into the BoardCell class.
 
 					b.setCellLabel(cell.charAt(0));
 					char specialOperation = cell.charAt(1);
@@ -197,69 +200,39 @@ public class Board {
 						// set the room center
 					} else if (specialOperation == '*') {
 						b.setRoomCenter(true);
+					} else if (roomMap.containsKey(specialOperation)) {
+						// else if the value is another room, then it's a secret passage
+						b.setSecretPassage(specialOperation);
 					} else {
-						// else it's a secret passage or an error
-						if (roomMap.containsKey(specialOperation)) {
-							b.setSecretPassage(specialOperation);
-						} else {
-							throw new BadConfigFormatException();
-						}
+						// Else there is an error and it's a bad config
+						throw new BadConfigFormatException();
 					}
 				}
-				r.add(b);
-
-				// System.out.println(b.getCellLabel());
+				row.add(b);
 
 				if (b.isDoorway()) {
-					// System.out.println("This is a doorway. Row: " + b.getRow() + ", Col: " +
-					// b.getCol());
-
-					doorways.add(b);
+					this.doorways.add(b);
 				}
 
 			}
 
-			// if the board size has been set/ initialized
-			if (this.board.size() != 0) {
-				// assert that it has the correct number of columns, if it doesn't, throw an
-				// exception
-				if (cols != this.numCols) {
-					throw new BadConfigFormatException();
-				}
-			}
 			// add the row
-			this.board.add(r);
+			this.board.add(row);
 
 			// increment the row
-			rows++;
+			rowIndex++;
 
-			// reset the column
-			cols = 0;
 		}
-
+		// Close the file
 		reader.close();
+		// Set the number of rows
+		this.numRows = rowIndex;
+	}
 
-		this.numRows = rows;
+	private void initializeAdjacencies() {
 
 		ArrayList<BoardCell> secretPaths = new ArrayList<BoardCell>();
 
-		// System.out.println("");
-
-//		for (int i = 0; i < this.numRows; i++) {
-//			for (int j = 0; j < this.numCols; j++) {
-//				BoardCell b = this.board.get(i).get(j);
-//
-//				System.out.print("" + b.getCellLabel() + ", ");
-//			}
-//			System.out.println("");
-//		}
-
-//		for (BoardCell doorway : doorways) {
-//			System.out.println("Row: " + doorway.getRow() + ", Col: " + doorway.getCol());
-//
-//			System.out.println(doorway.getCellLabel());
-//		}
-
 		// iterate through the gameboard
 		for (int i = 0; i < this.numRows; i++) {
 			for (int j = 0; j < this.numCols; j++) {
@@ -267,16 +240,16 @@ public class Board {
 				// get the boardcell
 				BoardCell b = this.board.get(i).get(j);
 
-				Room r = this.roomMap.get(b.getCellLabel());
+				Room room = this.roomMap.get(b.getCellLabel());
 
 				// If the cell is not 'Unused' then it needs adjacencies.
 				if (b.getCellLabel() != 'X') {
 
 					// if the room is the center, set it
 					if (b.getRoomCenter()) {
-						r.setCenter(b);
+						room.setCenter(b);
 					} else if (b.getRoomLabel()) { // if the room is the label, set it, room labels have no adjacencies
-						r.setLabelCell(b);
+						room.setLabelCell(b);
 					} else if (b.getSecretPassage() != '\0') {
 						secretPaths.add(b);
 					} else {
@@ -320,7 +293,7 @@ public class Board {
 		}
 
 		// Code for adding adjacencies from room center, secret path done at end.
-		for (BoardCell doorway : doorways) {
+		for (BoardCell doorway : this.doorways) {
 
 			BoardCell checkedCell = new BoardCell(-1, -1);
 
@@ -340,26 +313,12 @@ public class Board {
 				checkedCell = this.board.get(doorway.getRow()).get(doorway.getCol() + 1);
 			}
 
-//			System.out.println(checkedCell.getCellLabel());
-//
-//			System.out.println("Cell name: " + this.board.get(doorway.getRow()).get(doorway.getCol()).getCellLabel()
-//					+ ", Row: " + doorway.getRow() + ", Col: " + doorway.getCol());
-//
-//			BoardCell up = this.board.get(doorway.getRow()).get(doorway.getCol() + 1);
-//			BoardCell down = this.board.get(doorway.getRow()).get(doorway.getCol() - 1);
-//			BoardCell left = this.board.get(doorway.getRow() - 1).get(doorway.getCol());
-//			BoardCell right = this.board.get(doorway.getRow() + 1).get(doorway.getCol());
-//
-//			System.out.println("Up: " + up.getCellLabel() + ", Down: " + down.getCellLabel() + ", Left: "
-//					+ left.getCellLabel() + ", Right: " + right.getCellLabel());
-
 			BoardCell roomCell = roomMap.get(checkedCell.getCellLabel()).getCenterCell();
 
 			if (checkedCell.getCellLabel() == roomCell.getCellLabel()) {
 				roomCell.addAdjacency(doorway);
 				doorway.addAdjacency(roomCell);
 			}
-
 		}
 	}
 
@@ -431,10 +390,6 @@ public class Board {
 		targets = new HashSet<BoardCell>();
 		this.calcTargets(startCell, pathlength, pathlength, new HashSet<BoardCell>());
 
-//		for (BoardCell t : targets) {
-//			System.out.println("Row: " + t.getRow() + ", Col: " + t.getCol());
-//		}
-
 	}
 
 	private void calcTargets(BoardCell startCell, int pathlength, int maxpath, Set<BoardCell> visited) {
@@ -445,16 +400,11 @@ public class Board {
 		if (pathlength == 0 || (startCell.isRoomCenter() && maxpath != pathlength)) {
 			targets.add(startCell);
 
-//			System.out.println("FINAL CELL, Row: " + startCell.getRow() + ", Col: " + startCell.getCol() + "\n");
-
 		} else {
 			for (BoardCell cell : startCell.getAdjList()) {
 
 				if ((cell.isRoomCenter() || !cell.getOccupied()) && !visited.contains(cell)) {
 
-//					System.out.println("Row: " + startCell.getRow() + ", Col: " + startCell.getCol() + " TO " + "Row: "
-//							+ cell.getRow() + ", Col: " + cell.getCol());
-
 					visited.add(cell);
 					calcTargets(cell, pathlength - 1, maxpath, visited);
 					visited.remove(cell);
